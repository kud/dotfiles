#! /usr/bin/env zsh
setopt EXTENDED_GLOB

source $MY/core/helper

# define cask application folder
export HOMEBREW_CASK_OPTS=--appdir=/Applications

# install brew if needed
if ! type "brew" > /dev/null; then
  echo_space
  echo_title_install "homebrew"
  ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
fi

# install zsh via brew if needed
if ! type "/usr/local/bin/zsh" > /dev/null; then
  echo_space
  echo_title_install "zsh"
  brewinstall zsh
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells
  chsh -s /usr/local/bin/zsh $USER
  # sudo mv /etc/{zshenv,zprofile}
fi

# install bash via brew if needed
if ! type "/usr/local/bin/bash" > /dev/null; then
  echo_space
  echo_title_install "bash"
  brewinstall bash
  echo "/usr/local/bin/bash" | sudo tee -a /etc/shells
fi

# update/upgrade brew
echo_space
echo_title_update "brew"
brew update && brew upgrade --all

# install brew packages
echo_space
echo_title_install "brew packages"

## tap
brewtap homebrew/dupes
brewtap homebrew/versions
brewtap homebrew/php
brewtap caskroom/cask
brewtap caskroom/fonts
brewtap caskroom/versions
# brewtap aredridel/iojs

## system
brewinstall dnsmasq
brewinstall ssh-copy-id
brewinstall htop-osx
brewinstall homebrew/dupes/make
brewinstall homebrew/dupes/rsync
brewinstall archey
brewinstall mitmproxy
brewinstall wget
brewinstall curl
brewinstall pv
brewinstall md5sha1sum
brewinstall tree
brewinstall mtr
brewinstall ncdu
brewinstall iftop
brewinstall iotop
brewinstall lsof
brewinstall pwgen
brewinstall exiftool
brewinstall grep
brewinstall pcre2
brewinstall htmlcompressor
brewinstall mozjpeg
brewinstall gifsicle
brewinstall ffmpeg
brewinstall rename
# brewinstall terminal-notifier

## zsh
brewinstall zsh-syntax-highlighting
brewinstall zsh-completions
brewinstall zsh-history-substring-search

## git
brewinstall git
brewinstall ghi
brewinstall hub
brewinstall mdr

## editors
brewinstall vim

## languages
brewinstall ruby
brewinstall python
# brewinstall node
# brewinstall aredridel/iojs/iojs
brewinstall watchman
brewinstall flow
brewinstall nvm

## communication
brewinstall bitlbee # bridges for irc

## sync/backup
brewinstall syncthing

## others
brewinstall heroku-toolbelt
brewinstall youtube-dl
brewinstall flashlight

## homebrew plugins
brewinstall brew-cask

echo_space
echo_title "Cleaning brew..."
brew cleanup

# install apps
echo_space
echo_title_install "apps"

# caskinstall dropbox
# if [ ! -d "$HOME/Dropbox" ]; then
#   read \?"Configure now your dropbox and press [Enter] when you've finished..."
# fi

caskinstall wuala
if [ ! -d "$HOME/Wuala" ]; then
  read \?"Configure now your wuala and press [Enter] when you've finished..."
fi

caskinstall java # sorry my love :(
# caskinstall alfred
caskinstall flux
caskinstall iterm2
caskinstall appcleaner
caskinstall keepassx
caskinstall spectacle
caskinstall gifrocket
caskinstall grandperspective
# caskinstall cloudup
caskinstall xquartz
caskinstall flash
caskinstall bittorrent-sync
caskinstall qlcolorcode
caskinstall qlstephen
caskinstall qlmarkdown
caskinstall quicklook-json
caskinstall quicklook-csv
caskinstall prefs-editor
caskinstall qlprettypatch
caskinstall betterzipql
caskinstall webp-quicklook
caskinstall suspicious-package
caskinstall ios7-screensaver
caskinstall android-file-transfer
caskinstall licecap
caskinstall etrecheck
caskinstall macdown
caskinstall monodraw
# caskinstall recordit
# caskinstall xscope
# caskinstall google-drive

caskinstall font-ubuntu
caskinstall font-ubuntu-mono-powerline

# caskinstall sublime-text3
caskinstall sublime-text-dev
if ! type "subl" > /dev/null; then
  ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
fi
caskinstall firefox-nightly
# caskinstall firefoxdeveloperedition

caskinstall limechat

caskinstall imagealpha
caskinstall imageoptim
caskinstall img2icns

caskinstall spotify
caskinstall vlc

echo_space
echo_title "Cleaning brew cask..."
brew cask cleanup


# handle zprezto
if [ -d "$HOME/.zprezto" ]; then
  echo_space
  echo_title_update "prezto"
  cd "$HOME/.zprezto/"
  git pull
  git submodule update --init --recursive
  cd -
  # git --git-dir="$HOME/.zprezto/.git" --work-tree="$HOME/.zprezto/" pull
else
  echo_space
  echo_title_install "prezto"
  git clone --recursive https://github.com/sorin-ionescu/prezto.git "$HOME/.zprezto"
  echo_space
  echo_title "Copying zprezto files.."
  for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
    cp -ivn "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
  done
fi

# handle themes
if [ -d "$HOME/my/modules/themes" ]; then
  echo_space
  echo_title_update "themes"
  git --git-dir="$HOME/my/modules/themes/.git" --work-tree="$HOME/my/modules/themes/" pull
else
  echo_space
  echo_title_install "themes"
  git clone --recursive https://github.com/kud/themes.git "$HOME/my/modules/themes"
fi

mkdir -p ~/Library/Application\ Support/LimeChat/Themes
ln -sf ~/my/modules/themes/limechat/kud.css ~/Library/Application\ Support/LimeChat/Themes/kud.css
ln -sf ~/my/modules/themes/limechat/kud.yaml ~/Library/Application\ Support/LimeChat/Themes/kud.yaml

# ln -si ~/my/modules/themes/prezto/prompt_kud_setup ~/.zprezto/modules/prompt/functions/prompt_kud_setup

# vim theme
echo_space
echo_title_update "vim theme"
mkdir -p ~/.vim/colors
rm -f ~/.vim/colors/Tomorrow-Night-Eighties.vim
rm -f ~/.vim/colors/Tomorrow-Night.vim
curl -sL https://raw.githubusercontent.com/chriskempson/tomorrow-theme/master/vim/colors/Tomorrow-Night-Eighties.vim > ~/.vim/colors/Tomorrow-Night-Eighties.vim
curl -sL https://raw.githubusercontent.com/chriskempson/tomorrow-theme/master/vim/colors/Tomorrow-Night.vim > ~/.vim/colors/Tomorrow-Night.vim

# update ruby packages
echo_space
echo_title_update "gems"
gem update --system && gem update

# install ruby packages
# echo_space
# echo_title_install "global ruby packages"
# geminstall boom

# install python packages
echo_space
echo_title_install "global python packages"
pipinstall asciinema
pipinstall speedtest-cli

# install npm
# if ! type "npm" > /dev/null; then
#   echo_space
#   echo_title_install "npm"
#   curl -sL https://npmjs.org/install.sh | sh
# fi

echo_space
echo_title_update "npm"
npm install -g npm@latest

# update node packages
echo_space
echo_title_update "global node packages"
npm update -g --quiet

# install node packages
echo_space
echo_title_install "global node packages"
npminstall tldr
npminstall nodemon
npminstall jake
npminstall vtop
npminstall bloody-testserver
npminstall hicat
npminstall figlet-cli
npminstall tmi
npminstall trash
npminstall svgo
npminstall fraktur
npminstall weinre # debugger for web pages — http://people.apache.org/~pmuellr/weinre-docs/latest/
npminstall pageres # responsive website screenshots — https://github.com/sindresorhus/pageres
npminstall npm-check-updates@unstable # check if npm modules are updated
npminstall react-native-cli
npminstall markdown-live
npminstall caniuse-cmd
npminstall toggl
npminstall perfschool
# npminstall pure-prompt

npm config set save-exact true
npm config set tag-version-prefix ""

echo_space
echo_title "Remove shits"
sed -i "" 's/install.disable.sponsor.offers.*/install.disable.sponsor.offers=true/g' ~/Library/Application\ Support/Oracle/Java/Deployment/deployment.properties

# hack to make doctor not crying about `make`
# if type "/usr/local/bin/make" > /dev/null; then
#   brew unlink make > /dev/null
# fi


if [ $OS_PROFILE = 'laptop' ]; then
  source $MY/profiles/laptop/core/rocknroll
fi

if [ $OS_PROFILE = 'work' ]; then
  source $MY/profiles/work/core/rocknroll
fi

# warn about apps coming from app store
echo_space
echo_title "Don't forget to install via App Store"

if [ ! -d "/Applications/Twitter.app/" ]; then
  echo "- Twitter for Mac"
fi
if [ ! -d "/Applications/Xcode.app/" ]; then
  echo "- XCode"
fi
echo "- Network Link Conditioner"
if [ ! -d "/Applications/Xscope.app/" ]; then
  echo "- Xscope"
fi

echo_space
echo_title "Doctor is checking..."
brew doctor

# come brew packages back
# brew link make --force > /dev/null
# brew link zlib --force > /dev/null

# done!
echo_space
echo_success "And... we're done!"

# resource!
source $HOME/.zshrc
